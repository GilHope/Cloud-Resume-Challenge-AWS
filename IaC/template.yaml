AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  IaC

  Sample SAM Template for IaC

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    MemorySize: 128


Parameters:

  BucketName:
    Type: String
    Description: Name of my S3 bucket.
    Default: cloudresumebucket1234212321

Resources:

  #delete after test
  DummyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-dummy-bucket12349999999999


  MyDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: Z0020419160AHHBRDWWNM
      RecordSets:
        - Name: ghope.cloud.
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CloudResumeFront.DomainName

  MyCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: ghope.cloud
      DomainValidationOptions:
        - DomainName: ghope.cloud
          HostedZoneId: Z0020419160AHHBRDWWNM
      ValidationMethod: DNS

  CloudResumeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: Private


  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${CloudResumeBucket}.s3.amazonaws.com"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudResumeFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - ghope.cloud
        Origins:
          - Id: S3Origin
            OriginAccessControlId: !Ref OriginAccessControl
            DomainName: !GetAtt CloudResumeBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
        Enabled: true
        DefaultRootObject: index.html
        PriceClass: PriceClass_All
        
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false 
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          
        ViewerCertificate:
          AcmCertificateArn: !Ref MyCertificate
          SslSupportMethod: sni-only
        Restrictions:
          GeoRestriction:
            RestrictionType: none
          

  MyBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudResumeBucket
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal: 
               Service: "cloudfront.amazonaws.com"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${CloudResumeBucket}/*"
            Condition:
              StringEquals: 
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::427480290040:distribution/${CloudResumeFront}"

 




  # Serverless 

  CounterFunctionCloudResume:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: VisitCountFunc/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      FunctionName: CounterFunctionCloudResume
      Role: !GetAtt LambdaExecutionRoleCloudResume.Arn
      Events:
        VisitorCountAPI:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /VisitorCount
            Method: get         
      
  LambdaExecutionRoleCloudResume:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: LambdaGetItemDynamoDBAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            Resource: !GetAtt 'DynaDBTableCloudResume.Arn'


  DynaDBTableCloudResume:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: 'id'
          AttributeType: 'S'
      KeySchema: 
        -  
          AttributeName: 'id'
          KeyType: 'HASH'
      BillingMode: 'PAY_PER_REQUEST'
      TableName: 'DynaDBTableCloudResume'
      
Outputs:

  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/VisitorCount/"

  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt CounterFunctionCloudResume.Arn

  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt CounterFunctionCloudResume.Arn

  HelloWorldDistribtionOutput:
    Value: !GetAtt CloudResumeFront.DomainName

  CloudFrontDistributionId:
    Description: "CloudFront Distribution ID"
    Value: !Ref CloudResumeFront
    Export:
      Name: CloudFrontDistributionId



